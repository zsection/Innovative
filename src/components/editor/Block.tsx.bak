import React, { useEffect, useRef, useState } from 'react';
import { BookOpen, Calendar, Hash, CheckSquare, Square, List, ListOrdered, Heading1, Heading2, Heading3, Search, Check, ChevronRight, AlertCircle } from 'lucide-react';
import { Block as BlockType, PriorityLevel } from '../../utils/types';
import { processBlockInput, extractMetadata } from '../../utils/blockUtils';
import { useAppContext } from '../../store/store';
import BlockCommandMenu from './BlockCommandMenu';
import QueryBlock from './QueryBlock';

interface BlockProps {
  block: BlockType;
  index: number;
}

// Function to clean content by removing metadata markers
const getDisplayContent = (content: string): string => {
  return content
    .replace(/\s*!p[1-4]\b\s*/gi, ' ') // Hide priority markers with surrounding spaces
    .replace(/\s*\^(today|tomorrow|upcoming)\b\s*/gi, ' ') // Hide date markers with surrounding spaces
    .replace(/\s*#([a-z0-9_-]+)\b\s*/gi, ' ') // Hide tag markers with surrounding spaces
    .replace(/\s+/g, ' ') // Normalize spaces
    .trim();
};

const Block: React.FC<BlockProps> = ({ block, index }) => {
  const { 
    state, 
    blocks,
    updateBlocks,
    toggleBlockCheck,
    handleIndent,
    setDraggedBlock,
    setDragOverBlock,
    handleBlockDrop,
    handleMultiBlockDrop,
    toggleBlockSelection,
    clearBlockSelection,
    selectAllBlocks
  } = useAppContext();
  
  const { dragOverBlock, indentations, selectedBlockIds, isMultiSelectActive } = state;
  const inputRef = useRef<HTMLTextAreaElement>(null);
  const [touchStartTime, setTouchStartTime] = useState<number | null>(null);
  const [touchStartY, setTouchStartY] = useState<number | null>(null);
  const longPressTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  // State for slash command menu
  const [showCommandMenu, setShowCommandMenu] = useState(false);
  const [commandMenuAnchor, setCommandMenuAnchor] = useState<HTMLElement | null>(null);
  const [slashPosition, setSlashPosition] = useState<number | null>(null);
  
  // State for tag menu
  const [showTagMenu, setShowTagMenu] = useState(false);
  const [showPriorityMenu, setShowPriorityMenu] = useState(false);
  const [showDateMenu, setShowDateMenu] = useState(false);
  const tagMenuRef = useRef<HTMLDivElement>(null);
  const priorityMenuRef = useRef<HTMLDivElement>(null);
  const dateMenuRef = useRef<HTMLDivElement>(null);
  
  // State to track live metadata while typing
  const [liveMetadata, setLiveMetadata] = useState({ 
    priority: block.priority || '', 
    date: block.date || undefined, 
    tags: block.tags || [] 
  });
  const [isEditing, setIsEditing] = useState(false);
  
  // Create a display version of content without metadata markers
  const [displayContent, setDisplayContent] = useState(getDisplayContent(block.content));
  
  // Auto-resize the textarea when content changes
  useEffect(() => {
    if (inputRef.current) {
      const textarea = inputRef.current;
      textarea.style.height = 'auto';
      textarea.style.height = `${textarea.scrollHeight}px`;
    }
  }, [block.content]);
  
  // If this is a new empty block, focus it
  useEffect(() => {
    if (block.content === '' && index === blocks.length - 1) {
      inputRef.current?.focus();
    }
  }, [block.id, block.content, index, blocks.length]);
  
  // Calculate position for the command menu
  const updateCommandMenuPosition = () => {
    const input = inputRef.current;
    if (!input) return;
    
    // Create a temporary span to measure text width
    const span = document.createElement('span');
    span.style.font = window.getComputedStyle(input).font;
    span.style.position = 'absolute';
    span.style.visibility = 'hidden';
    span.style.whiteSpace = 'pre';
    
    // Get the text before the cursor
    const cursorPosition = input.selectionStart || 0;
    const textBeforeCursor = input.value.substring(0, cursorPosition);
    
    // Measure the width
    span.textContent = textBeforeCursor;
    document.body.appendChild(span);
    const textWidth = span.getBoundingClientRect().width;
    document.body.removeChild(span);
    
    // Create and position the menu anchor
    const rect = input.getBoundingClientRect();
    const anchorElement = document.createElement('div');
    anchorElement.style.position = 'absolute';
    anchorElement.style.left = `${rect.left + textWidth}px`;
    anchorElement.style.top = `${rect.top}px`;
    anchorElement.style.height = `${rect.height}px`;
    
    setCommandMenuAnchor(anchorElement);
  };
  
  // Handle key press in blocks
  const handleKeyDown = (e: React.KeyboardEvent, blockId: string, index: number) => {
    const input = e.target as HTMLTextAreaElement;
    const cursorPosition = input.selectionStart || 0;
    const textBeforeCursor = input.value.substring(0, cursorPosition);
    
    // Check for slash command
    if (e.key === '/' && textBeforeCursor === '') {
      e.preventDefault();
      setSlashPosition(cursorPosition);
      updateCommandMenuPosition();
      setShowCommandMenu(true);
      return;
    }
    
    // Close command menu on escape
    if (e.key === 'Escape' && showCommandMenu) {
      e.preventDefault();
      setShowCommandMenu(false);
      return;
    }
    
    // Tab for indentation
    if (e.key === 'Tab' && !e.shiftKey) {
      e.preventDefault();
      handleIndent(blockId, true);
      return;
    }
    
    // Shift+Tab for outdentation
    if (e.key === 'Tab' && e.shiftKey) {
      e.preventDefault();
      handleIndent(blockId, false);
      return;
    }
    
    // Enter creates a new block when not holding shift
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      
      // Inherit indentation level from current block
      const currentIndent = indentations[blockId] || 0;
      
      // Create new block with inherited type for tasks
      const newBlock: BlockType = { 
        id: `block-${Date.now()}`, 
        type: block.type === 'task' ? 'task' : 'text', // Inherit task type
        content: '', 
        priority: '',
        tags: [],
        collapsed: false,
        children: [],
        checked: false // Initialize as unchecked for tasks
      };
      
      const newBlocks = [...blocks];
      newBlocks.splice(index + 1, 0, newBlock);
      updateBlocks(newBlocks);
      
      // Set indentation for new block
      handleIndent(newBlock.id, false); // Reset to 0
      for (let i = 0; i < currentIndent; i++) {
        handleIndent(newBlock.id, true); // Increase to match the current block
      }
    }
    
    // Backspace on empty block deletes it and moves cursor up
    if (e.key === 'Backspace' && block.content === '' && blocks.length > 1) {
      e.preventDefault();
      
      const newBlocks = blocks.filter((_, i) => i !== index);
      updateBlocks(newBlocks);
      
      // Focus previous block - will be handled by useEffect in the next render
    }
    
    // Arrow up/down for navigation
    if (e.key === 'ArrowUp' && index > 0) {
      e.preventDefault();
      const prevBlock = blocks[index - 1];
      document.getElementById(`block-${prevBlock.id}`)?.focus();
    }
    
    if (e.key === 'ArrowDown' && index < blocks.length - 1) {
      e.preventDefault();
      const nextBlock = blocks[index + 1];
      document.getElementById(`block-${nextBlock.id}`)?.focus();
    }
  };

  // Update command menu position on input click or change
  const handleInputFocus = () => {
    if (showCommandMenu) {
      updateCommandMenuPosition();
    }
  };

  // Handle command menu selection
  const handleCommandSelect = (type: string) => {
    const updatedBlocks = [...blocks];
    const blockIndex = updatedBlocks.findIndex(b => b.id === block.id);
    
    if (blockIndex !== -1) {
      // Update block type based on selection
      switch (type) {
        case 'task':
          updatedBlocks[blockIndex] = {
            ...block,
            type: 'task',
            checked: false,
          };
          break;
        case 'bullet':
          updatedBlocks[blockIndex] = {
            ...block,
            type: 'bullet',
            content: 'â€¢ ',
          };
          break;
        case 'numbered':
          updatedBlocks[blockIndex] = {
            ...block,
            type: 'numbered',
            content: '1. ',
          };
          break;
        case 'h1':
          updatedBlocks[blockIndex] = {
            ...block,
            type: 'heading',
            headingLevel: 1 as 1,
            content: 'Heading 1',
          };
          break;
        case 'h2':
          updatedBlocks[blockIndex] = {
            ...block,
            type: 'heading',
            headingLevel: 2 as 2,
            content: 'Heading 2',
          };
          break;
        case 'h3':
          updatedBlocks[blockIndex] = {
            ...block,
            type: 'heading',
            headingLevel: 3 as 3,
            content: 'Heading 3',
          };
          break;
        case 'query':
          updatedBlocks[blockIndex] = {
            ...block,
            type: 'query',
            content: 'Custom Query',
            query: {
              blockTypes: ['task'],
              priorities: [],
              tags: [],
              dates: ['today']
            }
          };
          break;
      }
      
      updateBlocks(updatedBlocks);
      
      // Focus the block after update
      setTimeout(() => {
        inputRef.current?.focus();
        
        // For headings, select all text for quick editing
        if (type.startsWith('h')) {
          inputRef.current?.select();
        }
      }, 10);
    }
  };

  // Update query block
  const handleQueryBlockUpdate = (updatedBlock: BlockType) => {
    const newBlocks = blocks.map(b => 
      b.id === updatedBlock.id ? updatedBlock : b
    );
    updateBlocks(newBlocks);
  };

  // Get left padding based on indentation level
  const getLeftPadding = () => {
    const level = indentations[block.id] || 0;
    // First level has no padding, subsequent levels add 20px each
    return level === 0 ? '0px' : `${level * 20}px`;
  };
  
  // Handle checkbox click
  const handleCheckboxClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    toggleBlockCheck(block.id);
  };
  
  // Handle outside clicks for tag menu
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (tagMenuRef.current && !tagMenuRef.current.contains(event.target as Node)) {
        setShowTagMenu(false);
      }
      if (priorityMenuRef.current && !priorityMenuRef.current.contains(event.target as Node)) {
        setShowPriorityMenu(false);
      }
      if (dateMenuRef.current && !dateMenuRef.current.contains(event.target as Node)) {
        setShowDateMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Toggle tag menu
  const handleTagClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    setShowTagMenu(!showTagMenu);
    setShowPriorityMenu(false);
    setShowDateMenu(false);
  };

  // Toggle priority menu
  const handlePriorityClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    setShowPriorityMenu(!showPriorityMenu);
    setShowTagMenu(false);
    setShowDateMenu(false);
  };

  // Toggle date menu
  const handleDateClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    setShowDateMenu(!showDateMenu);
    setShowTagMenu(false);
    setShowPriorityMenu(false);
  };

  // Add tag to block
  const addTag = (tag: string) => {
    const newBlocks = blocks.map(b => {
      if (b.id === block.id) {
        const newTags = b.tags.includes(tag) 
          ? b.tags.filter(t => t !== tag) // Remove if already exists
          : [...b.tags, tag]; // Add if doesn't exist
        
        return {
          ...b,
          tags: newTags
        };
      }
      return b;
    });
    
    updateBlocks(newBlocks);
    setShowTagMenu(false);
  };

  // Set priority level
  const setPriority = (priority: PriorityLevel) => {
    const newBlocks = blocks.map(b => {
      if (b.id === block.id) {
        return {
          ...b,
          priority: b.priority === priority ? '' : priority // Toggle priority
        };
      }
      return b;
    });
    
    updateBlocks(newBlocks);
    setShowPriorityMenu(false);
  };

  // Set date for block
  const setDate = (date: string) => {
    const newBlocks = blocks.map(b => {
      if (b.id === block.id) {
        return {
          ...b,
          date: b.date === date ? undefined : date // Toggle date
        };
      }
      return b;
    });
    
    updateBlocks(newBlocks);
    setShowDateMenu(false);
  };

  // Update live metadata whenever content changes
  useEffect(() => {
    if (isEditing) {
      const extracted = extractMetadata(block.content);
      setLiveMetadata(extracted);
    }
  }, [block.content, isEditing]);
  
  // Update display content when actual content or editing state changes
  useEffect(() => {
    if (isEditing) {
      setDisplayContent(block.content); // Show full content with markers when editing
    } else {
      setDisplayContent(getDisplayContent(block.content)); // Clean content when not editing
    }
  }, [block.content, isEditing]);
  
  // Update metadata on blur (when editing stops)
  const handleBlur = () => {
    setIsEditing(false);
    
    // Update block with extracted metadata
    if (liveMetadata.priority || liveMetadata.date || liveMetadata.tags.length > 0) {
      const newBlocks = blocks.map(b => {
        if (b.id === block.id) {
          return {
            ...b,
            priority: liveMetadata.priority as PriorityLevel || b.priority,
            date: liveMetadata.date || b.date,
            tags: liveMetadata.tags.length > 0 ? liveMetadata.tags : b.tags
          };
        }
        return b;
      });
      
      updateBlocks(newBlocks);
    }
    
    // Update display content to hide metadata markers
    setDisplayContent(getDisplayContent(block.content));
    
    // After a short delay to ensure cursor position is preserved
    setTimeout(() => {
      if (inputRef.current) {
        const textarea = inputRef.current;
        textarea.style.height = 'auto';
        textarea.style.height = `${textarea.scrollHeight}px`;
      }
    }, 10);
  };
  
  // Handle focus
  const handleFocus = () => {
    setIsEditing(true);
    handleInputFocus();
    
    // Show original content with metadata markers
    setDisplayContent(block.content);
    
    // After a short delay, select cursor position
    setTimeout(() => {
      if (inputRef.current) {
        const textarea = inputRef.current;
        // Preserve cursor position if applicable
        const cursorPos = textarea.selectionStart || 0;
        textarea.setSelectionRange(cursorPos, cursorPos);
      }
    }, 0);
  };
  
  // Handle mouse selection with keyboard modifiers
  const handleBlockClick = (e: React.MouseEvent) => {
    // Only handle selection if not clicking on the checkbox or metadata items
    if ((e.target as HTMLElement).closest('.task-checkbox, .metadata-item')) {
      return;
    }
    
    // If ctrl/cmd key is pressed, toggle this block in selection
    if (e.ctrlKey || e.metaKey) {
      e.preventDefault();
      toggleBlockSelection(block.id);
    } 
    // If shift key is pressed, select range
    else if (e.shiftKey) {
      e.preventDefault();
      toggleBlockSelection(block.id, true);
    } 
    // If this block is already selected and we have multiple selections, maintain selection
    else if (selectedBlockIds.includes(block.id) && selectedBlockIds.length > 1) {
      // Don't clear selection, let user click again to focus just this block
    } 
    // Normal click - clear selection and focus this block
    else if (selectedBlockIds.length > 0) {
      clearBlockSelection();
    }
  };
  
  // Handle drag handle click with modifiers for selection
  const handleDragHandleClick = (e: React.MouseEvent) => {
    // If ctrl/cmd or shift key is pressed, handle selection
    if (e.ctrlKey || e.metaKey) {
      e.preventDefault();
      e.stopPropagation();
      toggleBlockSelection(block.id);
    } else if (e.shiftKey) {
      e.preventDefault();
      e.stopPropagation();
      toggleBlockSelection(block.id, true);
    } else if (!selectedBlockIds.includes(block.id)) {
      // Single click on unselected block's handle - select just this block
      clearBlockSelection();
      toggleBlockSelection(block.id);
    }
  };

  // Keyboard shortcut handler for selection and actions
  const handleSelectionKeyDown = (e: React.KeyboardEvent) => {
    // Ctrl/Cmd+A to select all blocks
    if ((e.ctrlKey || e.metaKey) && e.key === 'a') {
      e.preventDefault();
      selectAllBlocks();
    }
    
    // Escape to clear selection
    if (e.key === 'Escape' && selectedBlockIds.length > 0) {
      e.preventDefault();
      clearBlockSelection();
    }
  };

  // Add event listeners for keyboard shortcuts
  useEffect(() => {
    window.addEventListener('keydown', handleSelectionKeyDown as any);
    return () => {
      window.removeEventListener('keydown', handleSelectionKeyDown as any);
    };
  }, [blocks, selectedBlockIds]);
  
  // Handle block content with multi-selection support
  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    // Don't process in multi-select mode
    if (isMultiSelectActive && selectedBlockIds.length > 1) return;
    
    const newContent = e.target.value;
    processBlockInput(newContent, block.id, blocks, updateBlocks, false);
    
    // Extract metadata for visual display without modifying content
    const extracted = extractMetadata(newContent);
    setLiveMetadata(extracted);
    
    // Update display content when editing (show markers while editing)
    setDisplayContent(newContent);
  };
  
  // Render tags if they exist
  const renderTags = () => {
    const tagsToShow = isEditing ? liveMetadata.tags : block.tags;
    if (!tagsToShow || tagsToShow.length === 0) return null;
    
    // Show at most 1 tag by default, with a count indicator if there are more
    const hasMoreTags = tagsToShow.length > 1;
    
    return (
      <div className="relative group/tags">
        <span className="tag-badge">
          <span className="text-emerald-600">#</span>{tagsToShow[0]}
          {hasMoreTags && (
            <span className="ml-1 text-gray-400">+{tagsToShow.length - 1}</span>
          )}
        </span>
        
        {/* Show all tags on hover */}
        {hasMoreTags && (
          <div className="absolute right-0 top-full mt-1 invisible group-hover/tags:visible bg-white shadow-sm rounded-md border border-gray-200 p-2 w-auto z-10 whitespace-nowrap flex flex-col items-end">
            {tagsToShow.map((tag) => (
              <span key={tag} className="tag-badge mr-0 mb-1.5 last:mb-0">
                <span className="text-emerald-600">#</span>{tag}
              </span>
            ))}
          </div>
        )}
      </div>
    );
  };

  // Render priority if it exists (from block or live typing)
  const renderPriority = () => {
    const priorityToShow = isEditing ? liveMetadata.priority : block.priority;
    if (!priorityToShow) return null;
    
    // Use a flag icon instead of text for priority
    const priorityClass = `priority-badge priority-${priorityToShow.toLowerCase()}`;
    return (
      <span className={priorityClass}>
        <span>âš‘</span>
      </span>
    );
  };

  // Render date if it exists (from block or live typing)
  const renderDate = () => {
    const dateToShow = isEditing ? liveMetadata.date : block.date;
    if (!dateToShow) return null;
    
    // Format the date in a more minimal style
    let displayDate = dateToShow;
    let dateClass = "date-badge";
    
    // Color-code based on proximity
    if (dateToShow === 'today') {
      dateClass += " date-today"; // Today is highlighted differently
    } else if (dateToShow === 'tomorrow') {
      dateClass += " date-tomorrow"; // Tomorrow gets a different color
    } else if (dateToShow === 'upcoming') {
      dateClass += " date-upcoming"; // Future dates
    }
    
    // Shorter display format
    if (dateToShow === 'today') {
      displayDate = 'today';
    } else if (dateToShow === 'tomorrow') {
      displayDate = 'tmrw';
    } else if (dateToShow === 'upcoming') {
      displayDate = 'soon';
    }
    
    return (
      <span className={dateClass}>
        {displayDate}
      </span>
    );
  };

  // Function to render block content with the correct styling
  const renderBlockContent = () => {
    // For query blocks, render the QueryBlock component
    if (block.type === 'query') {
      return <QueryBlock block={block} onUpdate={handleQueryBlockUpdate} />;
    }

    let className = 'content-input';
    let placeholder = index === 0 
      ? "Type text, use !p1 for priority, ^today for date, #tag for tags..." 
      : "";
    
    // Add type-specific styling
    if (block.type === 'task' && block.checked) {
      className += ' line-through text-swiss-midGray';
    } else if (block.type === 'heading') {
      switch (block.headingLevel) {
        case 1:
          className += ' text-2xl font-bold';
          break;
        case 2:
          className += ' text-xl font-bold';
          break;
        case 3:
          className += ' text-lg font-bold';
          break;
      }
    }
    
    return (
      <textarea 
        id={`block-${block.id}`}
        ref={inputRef as any}
        value={displayContent}
        onChange={handleContentChange}
        onKeyDown={(e) => handleKeyDown(e, block.id, index)}
        onFocus={handleFocus}
        onBlur={handleBlur}
        onClick={handleFocus}
        className={className}
        placeholder={placeholder}
        spellCheck="false"
        rows={1}
      />
    );
  };
  
  // Render block type icon
  const renderBlockTypeIcon = () => {
    if (block.type === 'query') {
      return (
        <div className="block-type-icon mr-2 flex-shrink-0">
          <Search size={20} className="text-swiss-midGray" />
        </div>
      );
    }
    
    if (block.type === 'task') {
      return (
        <div 
          className="task-checkbox mr-2 flex-shrink-0 flex items-center"
          onClick={handleCheckboxClick}
        >
          {block.checked ? (
            <CheckSquare size={22} className="text-swiss-black" />
          ) : (
            <Square size={22} className="text-swiss-midGray" />
          )}
        </div>
      );
    } else if (block.type === 'bullet') {
      return (
        <div className="block-type-icon mr-2 flex-shrink-0">
          <List size={22} className="text-swiss-midGray" />
        </div>
      );
    } else if (block.type === 'numbered') {
      return (
        <div className="block-type-icon mr-2 flex-shrink-0">
          <ListOrdered size={22} className="text-swiss-midGray" />
        </div>
      );
    } else if (block.type === 'heading') {
      switch (block.headingLevel) {
        case 1:
          return (
            <div className="block-type-icon mr-2 flex-shrink-0">
              <Heading1 size={22} className="text-swiss-midGray" />
            </div>
          );
        case 2:
          return (
            <div className="block-type-icon mr-2 flex-shrink-0">
              <Heading2 size={22} className="text-swiss-midGray" />
            </div>
          );
        case 3:
          return (
            <div className="block-type-icon mr-2 flex-shrink-0">
              <Heading3 size={22} className="text-swiss-midGray" />
            </div>
          );
      }
    }
    
    return null;
  };
  
  // Check if the block is selected
  const isSelected = selectedBlockIds.includes(block.id);
  
  // Handle touch events for mobile selection
  const handleTouchStart = (e: React.TouchEvent) => {
    // Record touch start time for long press detection
    setTouchStartTime(Date.now());
    setTouchStartY(e.touches[0].clientY);
    
    // Set up long press timeout (500ms)
    longPressTimeoutRef.current = setTimeout(() => {
      // Long press detected - toggle selection
      toggleBlockSelection(block.id);
      setTouchStartTime(null);
      // Provide haptic feedback if available
      if (window.navigator && window.navigator.vibrate) {
        window.navigator.vibrate(50); // 50ms vibration
      }
    }, 500);
  };
  
  const handleTouchMove = (e: React.TouchEvent) => {
    // If we're in multi-select mode and the user is scrolling, allow normal scrolling
    if (touchStartY !== null) {
      const moveY = Math.abs(e.touches[0].clientY - touchStartY);
      // If moved more than 10px vertically, cancel the long press
      if (moveY > 10) {
        if (longPressTimeoutRef.current) {
          clearTimeout(longPressTimeoutRef.current);
          longPressTimeoutRef.current = null;
        }
      }
    }
  };
  
  const handleTouchEnd = () => {
    // Clear the long press timeout
    if (longPressTimeoutRef.current) {
      clearTimeout(longPressTimeoutRef.current);
      longPressTimeoutRef.current = null;
    }
    
    // If this was a quick tap and we're in multi-select mode, toggle selection
    if (touchStartTime && Date.now() - touchStartTime < 300 && isMultiSelectActive) {
      toggleBlockSelection(block.id);
    }
    
    setTouchStartTime(null);
    setTouchStartY(null);
  };
  
  // Clean up timeout on unmount
  useEffect(() => {
    return () => {
      if (longPressTimeoutRef.current) {
        clearTimeout(longPressTimeoutRef.current);
      }
    };
  }, []);
  
  // For query blocks, we need a different wrapper since they're more complex
  if (block.type === 'query') {
    return (
      <div 
        className={`editor-block group ${isSelected ? 'selected-block' : ''}`}
        style={{ paddingLeft: getLeftPadding() }}
        onClick={handleBlockClick}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <div 
          className="block-handle opacity-0 group-hover:opacity-100"
          onClick={handleDragHandleClick}
        >
          <div className="handle-dots">â‹®</div>
        </div>
        
        <div className="block-content w-full">
          <div className="block-type-icon mr-2 flex-shrink-0">
            <Search size={20} className="text-swiss-midGray" />
          </div>
          
          <div className="content-wrapper">
            <div className="content-input-container">
              {renderBlockContent()}
            </div>
          </div>
          
          {/* Multi-select indicator */}
          {isSelected && (
            <div className="multi-select-indicator"></div>
          )}
        </div>
        
        {/* Command Menu */}
        <BlockCommandMenu
          isOpen={showCommandMenu}
          anchorEl={commandMenuAnchor}
          onSelect={handleCommandSelect}
          onClose={() => setShowCommandMenu(false)}
        />
      </div>
    );
  }
  
  // Render the regular block's content
  return (
    <div 
      draggable={isMultiSelectActive ? isSelected : true}
      onDragStart={(e) => {
        if (isMultiSelectActive && isSelected) {
          // Handle multi-drag
          e.dataTransfer.setData('text/plain', JSON.stringify(selectedBlockIds));
        } else {
          setDraggedBlock(block.id);
        }
      }}
      onDragOver={(e) => {
        e.preventDefault();
        if (state.draggedBlock !== block.id) {
          setDragOverBlock(block.id);
        }
      }}
      onDrop={(e) => {
        if (isMultiSelectActive && selectedBlockIds.length > 1) {
          handleMultiBlockDrop(e);
        } else {
          handleBlockDrop(e);
        }
      }}
      onClick={handleBlockClick}
      onTouchStart={handleTouchStart}
      onTouchMove={handleTouchMove}
      onTouchEnd={handleTouchEnd}
      className={`editor-block group ${
        dragOverBlock === block.id ? 'drag-over' : ''
      } ${isSelected ? 'selected-block' : ''}`}
      style={{ paddingLeft: getLeftPadding() }}
    >
      <div 
        className="block-handle opacity-0 group-hover:opacity-100"
        onClick={handleDragHandleClick}
      >
        <div className="handle-dots">â‹®</div>
      </div>
      
      <div className="block-content w-full">
        {renderBlockTypeIcon()}
        
        <div className="content-wrapper">
          <div className="content-input-container">
            {renderBlockContent()}
          </div>

          {/* Smart metadata display - compact inline flex with minimal spacing */}
          <div className="metadata-container">
            {/* Priority flag - show actual or placeholder */}
            {(isEditing ? liveMetadata.priority : block.priority) && (
              <div 
                onClick={handlePriorityClick} 
                className="cursor-pointer hover:opacity-100 opacity-80 transition-opacity"
              >
                {renderPriority()}
              </div>
            )}
            
            {/* Date badge - show actual or placeholder */}
            {(isEditing ? liveMetadata.date : block.date) && (
              <div 
                onClick={handleDateClick} 
                className="cursor-pointer hover:opacity-100 opacity-80 transition-opacity"
              >
                {renderDate()}
              </div>
            )}
            
            {/* Tag badge - show actual or placeholder */}
            {(isEditing ? liveMetadata.tags.length > 0 : block.tags && block.tags.length > 0) && (
              <div 
                onClick={handleTagClick} 
                className="cursor-pointer hover:opacity-100 opacity-80 transition-opacity"
              >
                {renderTags()}
              </div>
            )}
          </div>
        </div>

        {/* Multi-select indicator */}
        {isSelected && (
          <div className="multi-select-indicator"></div>
        )}
      </div>
      
      {/* Command Menu */}
      <BlockCommandMenu
        isOpen={showCommandMenu}
        anchorEl={commandMenuAnchor}
        onSelect={handleCommandSelect}
        onClose={() => setShowCommandMenu(false)}
      />
      
      {/* Tag Menu */}
      {showTagMenu && (
        <div 
          ref={tagMenuRef}
          className="absolute right-0 top-full mt-1.5 bg-white shadow-md rounded-lg border border-gray-200 z-10 w-48"
        >
          <div className="p-2 border-b border-gray-100">
            <div className="text-sm font-medium">Tags</div>
          </div>
          <div className="p-2 max-h-48 overflow-y-auto">
            {state.tagCollection.map(tag => (
              <div 
                key={tag}
                className={`flex items-center p-1.5 cursor-pointer hover:bg-gray-50 rounded-md ${block.tags.includes(tag) ? 'bg-gray-50' : ''}`}
                onClick={() => addTag(tag)}
              >
                <span className="mr-2 text-emerald-600">{block.tags.includes(tag) ? 'âœ“' : ''}</span>
                <span className="text-sm"><span className="text-emerald-600">#</span>{tag}</span>
              </div>
            ))}
            {state.tagCollection.length === 0 && (
              <div className="text-xs text-gray-400 p-1.5">
                No tags available. Tags will appear here when used.
              </div>
            )}
          </div>
        </div>
      )}
      
      {/* Priority Menu */}
      {showPriorityMenu && (
        <div 
          ref={priorityMenuRef}
          className="absolute right-0 top-full mt-1.5 bg-white shadow-md rounded-lg border border-gray-200 z-10 w-40"
        >
          <div className="p-2 border-b border-gray-100">
            <div className="text-sm font-medium">Priority</div>
          </div>
          <div className="p-2">
            <div 
              className={`flex items-center p-1.5 cursor-pointer hover:bg-gray-50 rounded-md ${block.priority === 'P1' ? 'bg-gray-50' : ''}`}
              onClick={() => setPriority('P1')}
            >
              <span className="priority-badge priority-p1 mr-2 flex-shrink-0">
                <span>âš‘</span>
              </span>
              <span className="text-sm">Urgent</span>
            </div>
            <div 
              className={`flex items-center p-1.5 cursor-pointer hover:bg-gray-50 rounded-md ${block.priority === 'P2' ? 'bg-gray-50' : ''}`}
              onClick={() => setPriority('P2')}
            >
              <span className="priority-badge priority-p2 mr-2 flex-shrink-0">
                <span>âš‘</span>
              </span>
              <span className="text-sm">High</span>
            </div>
            <div 
              className={`flex items-center p-1.5 cursor-pointer hover:bg-gray-50 rounded-md ${block.priority === 'P3' ? 'bg-gray-50' : ''}`}
              onClick={() => setPriority('P3')}
            >
              <span className="priority-badge priority-p3 mr-2 flex-shrink-0">
                <span>âš‘</span>
              </span>
              <span className="text-sm">Medium</span>
            </div>
            <div 
              className={`flex items-center p-1.5 cursor-pointer hover:bg-gray-50 rounded-md ${block.priority === 'P4' ? 'bg-gray-50' : ''}`}
              onClick={() => setPriority('P4')}
            >
              <span className="priority-badge priority-p4 mr-2 flex-shrink-0">
                <span>âš‘</span>
              </span>
              <span className="text-sm">Low</span>
            </div>
            {block.priority && (
              <div 
                className="flex items-center p-1.5 cursor-pointer hover:bg-gray-50 rounded-md mt-1 border-t border-gray-100 pt-2"
                onClick={() => setPriority('')}
              >
                <span className="text-sm text-gray-500">Clear priority</span>
              </div>
            )}
          </div>
        </div>
      )}
      
      {/* Date Menu */}
      {showDateMenu && (
        <div 
          ref={dateMenuRef}
          className="absolute right-0 top-full mt-1.5 bg-white shadow-md rounded-lg border border-gray-200 z-10 w-40"
        >
          <div className="p-2 border-b border-gray-100">
            <div className="text-sm font-medium">Date</div>
          </div>
          <div className="p-2">
            <div 
              className={`flex items-center p-1.5 cursor-pointer hover:bg-gray-50 rounded-md ${block.date === 'today' ? 'bg-gray-50' : ''}`}
              onClick={() => setDate('today')}
            >
              <span className="date-badge date-today mr-2">today</span>
              <span className="text-sm">Today</span>
            </div>
            <div 
              className={`flex items-center p-1.5 cursor-pointer hover:bg-gray-50 rounded-md ${block.date === 'tomorrow' ? 'bg-gray-50' : ''}`}
              onClick={() => setDate('tomorrow')}
            >
              <span className="date-badge date-tomorrow mr-2">tmrw</span>
              <span className="text-sm">Tomorrow</span>
            </div>
            <div 
              className={`flex items-center p-1.5 cursor-pointer hover:bg-gray-50 rounded-md ${block.date === 'upcoming' ? 'bg-gray-50' : ''}`}
              onClick={() => setDate('upcoming')}
            >
              <span className="date-badge date-upcoming mr-2">soon</span>
              <span className="text-sm">Upcoming</span>
            </div>
            {block.date && (
              <div 
                className="flex items-center p-1.5 cursor-pointer hover:bg-gray-50 rounded-md mt-1 border-t border-gray-100 pt-2"
                onClick={() => setDate('')}
              >
                <span className="text-sm text-gray-500">Clear date</span>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Block;
